#!/usr/bin/env python

import sys, ConfigParser, os
from subprocess import check_output, check_call
from os import listdir, path, chdir
from re import search

def repos(hidden):
    return [x for x in listdir(".") if path.exists("%s/.git" % x) and x not in hidden]

def base_args(repo):
    return ["git", "--git-dir=%s/.git" % repo, "--work-tree=%s" % repo]

def status(repos):
    for repo in repos:
        print '\033[93m', repo, '\033[0m'
        output = check_output(base_args(repo) + ["status"])
        for line in output.split('\n'):
            match = search("# On branch (.*)", line)
            if match:
                print "# On branch \033[31m%s\033[0m" % match.group(1)
            else:
                print line

def fetch(repos):
    for repo in repos:
        print "Fetching from %s" % repo
        check_call(base_args(repo) + ["fetch"])

def checkout(repos, branch):
    for repo in repos:
        print "Checking out %s in %s" % (branch, repo)
        check_call(base_args(repo) + ["checkout", branch])

def pull(repos):
    for repo in repos:
        print "Pulling from %s" % repo
        try:
            chdir(repo)
            check_call(["git", "pull"])
        finally:
            chdir("..")

if __name__ == '__main__':
    config = ConfigParser.ConfigParser()
    config_file = os.environ["HOME"] + "/.repos/config"
    if len(config.read(config_file)) != 1:
        print "Could not read configuration: " + config_file
        exit(1)
    hidden = [repo.strip() for repo in config.get("main", "hidden").split(",")]

    repo_list = repos(hidden)
    if "status" in sys.argv[0]:
        status(repo_list)
    elif "fetch" in sys.argv[0]:
        fetch(repo_list)
    elif "checkout" in sys.argv[0]:
        if len(sys.argv) != 2:
            print "usage: checkout <branch>"
            exit(1)
        checkout(repo_list, sys.argv[1])
    elif "pull" in sys.argv[0]:
        pull(repo_list)
