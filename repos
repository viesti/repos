#!/usr/bin/env python

import sys, ConfigParser, os
from subprocess import check_output, check_call, CalledProcessError, STDOUT
from os import listdir, path, chdir
from re import search
from getopt import getopt

def repos(hidden):
    return [x for x in listdir(".") if path.exists("%s/.git" % x) and x not in hidden]

def base_args(repo):
    return ["git", "--git-dir=%s/.git" % repo, "--work-tree=%s" % repo]

def status(repos):
    for repo in repos:
        print '\033[93m', repo, '\033[0m'
        output = check_output(base_args(repo) + ["status"])
        for line in output.split('\n'):
            match = search("# On branch (.*)", line)
            if match:
                print "# On branch \033[31m%s\033[0m" % match.group(1)
            else:
                print line

def fetch(repos):
    for repo in repos:
        print "Fetching from %s" % repo
        check_call(base_args(repo) + ["fetch"])

def checkout(repos, branch):
    for repo in repos:
        print "Checking out %s in %s" % (branch, repo)
        try:
            check_output(base_args(repo) + ["checkout", branch], stderr=STDOUT)
        except CalledProcessError, e:
            print "Failed to checkout %s\n\033[31m%s\033[0m" % (branch, e.output.strip())

def pull(repos):
    for repo in repos:
        print "Pulling from %s" % repo
        try:
            chdir(repo)
            check_call(["git", "pull"])
        finally:
            chdir("..")

def list_branches(repos, branch=None):
    branches_per_repo = {}
    for repo in repos:
        branches = []
        output = check_output(base_args(repo) + ["branch", "-a"])
        for line in output.split('\n'):
            if line.strip():
                branches.append(line.strip().replace("* ", ""))
        branches_per_repo[repo] = branches
    if not branch:
        all_branches = set()
        for k, v in branches_per_repo.items():
            all_branches = all_branches | set(v)
        print "\n".join(all_branches)
    else:
        for k, v in branches_per_repo.items():
            if branch in v:
                print k

def read_hidden_repos():
    config_file = os.environ["HOME"] + "/.repos/config"
    if not os.path.exists(config_file):
        return []

    config = ConfigParser.ConfigParser()
    if len(config.read(config_file)) != 1:
        print "Could not read configuration: " + config_file
        exit(1)
    return [repo.strip() for repo in config.get("main", "hidden").split(",")]

if __name__ == '__main__':
    repo_list = repos(read_hidden_repos())
    if "repos" in sys.argv[0]:
        opts, _ = getopt(sys.argv[1:], "sfpc:b")
        for option, value in opts:
            if option == "-s":
                status(repo_list)
            elif option == "-f":
                fetch(repo_list)
            elif option == "-p":
                pull(repo_list)
            elif option == "-c":
                checkout(repo_list, value)
            elif option == "-b":
                if value:
                    list_branches(repo_list, sys.argv[1])
                else:
                    list_branches(repo_list)
    else:
        if "status" in sys.argv[0]:
            status(repo_list)
        elif "fetch" in sys.argv[0]:
            fetch(repo_list)
        elif "checkout" in sys.argv[0]:
            if len(sys.argv) != 2:
                print "usage: checkout <branch>"
                exit(1)
            checkout(repo_list, sys.argv[1])
        elif "pull" in sys.argv[0]:
            pull(repo_list)
        elif "branches" in sys.argv[0]:
            if len(sys.argv) > 1:
                list_branches(repo_list, sys.argv[1])
            else:
                list_branches(repo_list)
